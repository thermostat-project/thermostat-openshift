apiVersion: "v1"
kind: "Template"
metadata:
  name: "thermostat-gateway-client-online-starter"
objects:
###################
## BUILD CONFIGS ##
###################
##### GATEWAY #####
# gateway image bc
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "thermostat-gateway-bc"
    labels:
      app-group: "thermostat-online-starter"
  spec:
    triggers:
      - type: "ConfigChange"
      - type: "ImageChange"
        imageChange: {}
    source:
      type: "Git"
      git:
        uri: "git://icedtea.classpath.org/mirror/git/thermostat-ng-web-gateway"
    strategy:
      type: "Source"
      sourceStrategy:
        from:
          kind: "ImageStreamTag"
          name: "thermostat-gateway-client-builder:latest"
        env:
          # OSO Starter: Limit JVM memory usage and skip tests
        - name: "MAVEN_OPTS"
          value: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseSerialGC -DskipTests=true"
    output:
      to:
        kind: "ImageStreamTag"
        name: "thermostat-gateway:latest"
    runPolicy: "Serial"
##### CLIENT #####
# client artifacts image bc
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "thermostat-gateway-client-bc"
    labels:
      app-group: "thermostat-online-starter"
  spec:
    triggers:
    - type: "ConfigChange"
    - type: "ImageChange"
      imageChange: {}
    # OSO Starter: Allocate as much memory from our quota as possible for this build.
    # We can limit memory usage by installing deps with npm one at a time,
    # but webpack still needs a lot of memory.
    resources:
      limits:
        memory: "1Gi"
      requests:
        memory: "1Gi"
    source:
      type: "Git"
      git:
        uri: "git://icedtea.classpath.org/mirror/git/thermostat-ng-web-client"
    strategy:
      type: "Source"
      sourceStrategy:
        from:
          kind: "ImageStreamTag"
          name: "thermostat-gateway:latest"
        scripts: "image:///usr/libexec/s2i/webclient"
        env:
          # OSO Starter: Attempt to limit Node.js memory consumption
          # https://stackoverflow.com/a/30254608
        - name: "NODE_ARGS"
          value: "--max-executable-size=192 --max-old-space-size=768 --max-semi-space-size=2"
    output:
      to:
        kind: "ImageStreamTag"
        name: "thermostat-gateway-client:latest"
    runPolicy: "Serial"
###################
## IMAGE STREAMS ##
###################
##### GATEWAY + CLIENT #####
# gateway + client builder image
- apiVersion: "v1"
  kind: "ImageStream"
  metadata:
    name: "thermostat-gateway-client-builder"
    labels:
      app-group: "thermostat-online-starter"
  spec:
    dockerImageRepository: "docker.io/icedtea/thermostat-web-gateway-client-32bit-builder"
# gateway image
- apiVersion: "v1"
  kind: "ImageStream"
  metadata:
    name: "thermostat-gateway"
    labels:
      app-group: "thermostat-online-starter"
# gateway + client image
- apiVersion: "v1"
  kind: "ImageStream"
  metadata:
    name: "thermostat-gateway-client"
    labels:
      app-group: "thermostat-online-starter"
#############
## SECRETS ##
#############
- apiVersion: "v1"
  kind: "Secret"
  metadata:
    name: "basic-auth-config"
  stringData:
    basic-config.properties: "${BASIC_AUTH_CONFIG}"
########################
## DEPLOYMENT CONFIGS ##
########################
# gateway + client dc
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    name: "thermostat-gateway-client-dc"
    labels:
      app: "thermostat-gateway-client-app"
      app-group: "thermostat-online-starter"
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    triggers:
    - type: "ConfigChange"
    - type: "ImageChange"
      imageChangeParams:
        automatic: true
        containerNames:
        - thermostat-gateway-client-container
        from:
          kind: "ImageStreamTag"
          name: "thermostat-gateway-client:latest"
    template:
      metadata:
        labels:
          app: "thermostat-gateway-client-app"
          app-group: "thermostat-online-starter"
      spec:
        containers:
        - name: "thermostat-gateway-client-container"
          image: "thermostat-gateway-client:latest"
          imagePullPolicy: "Always"
          env:
          - name: "MONGO_DB"
            value: "thermostat"
          - name: "MONGO_PASSWORD"
            value: "mongo"
          - name: "MONGO_URL"
            value: "mongodb://thermostat-mongodb-svc:27017"
          - name: "MONGO_USERNAME"
            value: "mongo"
          - name: "BASIC_AUTH_CONFIG"
            value: "/etc/basic-auth-config/basic-config.properties"
            # OSO Starter: Respect container memory limits, and use serial GC since we have 1 CPU
          - name: "THERMOSTAT_GATEWAY_EXT_JAVA_OPTS"
            value: >- 
              -XX:+UseParallelGC -XX:MinHeapFreeRatio=5
              -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4
              -XX:AdaptiveSizePolicyWeight=90 -Xms20M -Xmx128M -Xss256k
              -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
              -Dsun.zip.disableMemoryMapping=true
              -XX:NativeMemoryTracking=summary
          # OSO Starter: Set container memory limit to 1/4 of our total quota
          resources:
            limits:
              memory: "256Mi"
          volumeMounts:
            - name: "basic-auth-volume"
              mountPath: "/etc/basic-auth-config"
              readOnly: true
        volumes:
          - name: "basic-auth-volume"
            secret:
              secretName: "basic-auth-config"
              defaultMode: 0440
    selector:
      app: "thermostat-gateway-client-app"
    replicas: 1
    strategy:
      type: "Recreate"
      recreateParams: 
        pre:
          failurePolicy: "Retry"
          execNewPod:
            containerName: "thermostat-gateway-client-container"
            # Attempt to connect to MongoDB using Mongo shell
            command: [ "scl", "enable", "rh-mongodb32", "mongo --eval 'quit()' ${MONGO_URL}" ] 
##############
## SERVICES ##
##############
# gateway + client service
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "thermostat-gateway-client-svc"
    labels:
      app: "thermostat-gateway-client-app"
      app-group: "thermostat-online-starter"
  spec:
    selector:
      app: "thermostat-gateway-client-app"
    ports:
    - name: 30000-tcp
      protocol: TCP
      port: 30000
      targetPort: 30000
############
## ROUTES ##
############
# gateway + client route
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "thermostat-gateway-client-route"
    labels:
      app-group: "thermostat-online-starter"
  spec:
    to:
      kind: "Service"
      name: "thermostat-gateway-client-svc"
    port:
      targetPort: "30000-tcp"
    tls:
      termination: "passthrough"
################
## PARAMETERS ##
################
parameters:
- name: "BASIC_AUTH_CONFIG"
  description: "Configuration for Basic authentication for the web gateway"
  value: |-
    agent=agent-pwd,r-thermostat,w-thermostat,u-thermostat,d-thermostat,receiver_provider-commands,thermostat
    client=client-pwd,r-thermostat,kill_vm-commands,ping-commands,thermostat,byteman-commands
  required: true
